{"version":3,"sources":["marsRover/mars_rover.png","marsRover/Node.js","marsRover/Algos/bfs.js","marsRover/Algos/dfs.js","marsRover/Algos/aStar.js","marsRover/Algos/dijkstra.js","marsRover/Algos/getPath.js","marsRover/pathFinder.js","marsRover/Algos/IntermediateNode.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","this","props","row","col","isStart","isFinish","onMouseEnter","num","onMouseDown","onMouseUp","isWall","isVisited","isWeighted","isPlant","extraClass","id","className","color","Component","bfs","grid","start","finish","queue","order","push","length","curr","shift","neighbours","getNeighbours","i","prev","r","c","n","foundPath","dfs","found","temp","Heap","require","isValid","aStar","a","b","d","openList","nodeA","nodeB","f","t","dx","dy","s","distance","empty","pop","console","log","newRow","newCol","h","Math","abs","g","dijkstra","visitedNodesInOrder","unvisitedNodes","nodes","node","getAllNodes","sortNodesByDistance","closestNode","Infinity","updateUnvisitedNeighbours","sort","unvisitedNeighbours","filter","neighbour","getUnvisitedNeighbours","distanceDijkstra","dist","getPath","shortestPath","current","sr","sc","fr","fc","fr2","fc2","cross_button","PathFinder","state","setGrid","mouse","changeStart","changeFinish","changePlant","addWeight","pathLength","isAnimationActive","whichAlgo","visualiseMessage","isPlantFinish","PlantMessage","isPlantPresent","infoMessage","weightMessage","isAnimationPresent","animatePath","bind","curr_row","j","newNode","newGrid","slice","setState","visualiseMovingPath","resetGrid","path","additional","lastAnimation","reverse","weightedLength","setTimeout","document","getElementById","classList","add","algo","resetPath","removeWeights","setAlgo","map","Object","assign","animateVisited","visualiseTwoDest","path1","path2","grid1","grid2","f1","f2","order1","order2","IntermediateNode","remove","handleMouseUp","src","mars_rover","alt","href","onClick","togglePlant","toggleW","class","visualise","rowInd","key","ind","val","inPath","handleMouseDown","handleMouseEnter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.926a0274.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mars_rover.dc205653.png\";","import React, {Component} from \"react\";\r\nimport \"./css-project/Node.css\"\r\nimport IosLeaf from 'react-ionicons/lib/IosLeafOutline'\r\nimport IosRadioOutline from 'react-ionicons/lib/IosRadioOutline'\r\nimport IosIonitron from 'react-ionicons/lib/IosIonitron'\r\nimport IosLock from 'react-ionicons/lib/IosLock'\r\nimport \"./css-resources/normalize.css\"\r\nimport \"./css-resources/grid.css\"\r\n\r\nexport default class Node extends Component\r\n{\r\n    render()\r\n    {\r\n        const {\r\n            row,\r\n            col,\r\n            isStart,\r\n            isFinish,\r\n            num,\r\n            onMouseEnter,\r\n            onMouseDown,\r\n            onMouseUp,\r\n            isVisited,\r\n            isWall,\r\n            isWeighted,\r\n            isPlant\r\n        }= this.props;\r\n        \r\n        const extraClass=isFinish ? \"isFinish\":\r\n        isStart? \"isStart\":\r\n        isWall? \"isWall\": \r\n        isWeighted? \"isWeighted\": \r\n        isPlant?\"isPlant\":\"\";\r\n \r\n        if(isWeighted)\r\n        return(\r\n           <div id={`node-${row}-${col}`}\r\n            className={`node ${extraClass}`}\r\n            onMouseDown = {()=>onMouseDown(row,col)}\r\n            onMouseUp= {()=> onMouseUp(row,col)}\r\n            onMouseEnter = {()=> onMouseEnter(row,col)}\r\n           >\r\n               <IosLock color=\"#fff1da\"/>\r\n           </div>\r\n        );\r\n        else if (isStart)\r\n        return(\r\n            <div id={`node-${row}-${col}`}\r\n             className={`node ${extraClass}`}\r\n             onMouseDown = {()=>onMouseDown(row,col)}\r\n             onMouseUp= {()=> onMouseUp(row,col)}\r\n             onMouseEnter = {()=> onMouseEnter(row,col)}\r\n            >\r\n                <IosIonitron/>\r\n            </div>\r\n         );\r\n        else if (isFinish)\r\n        return(\r\n            <div id={`node-${row}-${col}`}\r\n             className={`node ${extraClass}`}\r\n             onMouseDown = {()=>onMouseDown(row,col)}\r\n             onMouseUp= {()=> onMouseUp(row,col)}\r\n             onMouseEnter = {()=> onMouseEnter(row,col)}\r\n            >\r\n                <IosRadioOutline/>\r\n            </div>\r\n         );\r\n         else if (isPlant)\r\n         return(\r\n            <div id={`node-${row}-${col}`}\r\n             className={`node ${extraClass}`}\r\n             onMouseDown = {()=>onMouseDown(row,col)}\r\n             onMouseUp= {()=> onMouseUp(row,col)}\r\n             onMouseEnter = {()=> onMouseEnter(row,col)}\r\n            >\r\n                <IosLeaf/>\r\n            </div>\r\n         );\r\n         else\r\n         return(\r\n            <div id={`node-${row}-${col}`}\r\n             className={`node ${extraClass}`}\r\n             onMouseDown = {()=>onMouseDown(row,col)}\r\n             onMouseUp= {()=> onMouseUp(row,col)}\r\n             onMouseEnter = {()=> onMouseEnter(row,col)}\r\n            >\r\n            </div>\r\n         );\r\n    }\r\n}\r\n","\r\n\r\nexport function bfs(grid, start, finish) \r\n{\r\n    const queue=[];\r\n    const order=[];\r\n    queue.push(start);\r\n    while(queue.length>0)\r\n        {\r\n            const curr=queue.shift();\r\n            const {row, col}=curr;\r\n            if(grid[row][col].isVisited===true)\r\n            {\r\n                continue;\r\n            }\r\n            const neighbours=getNeighbours(grid, curr);\r\n            for(let i=0;i<neighbours.length;i++)\r\n                {\r\n                    queue.push(neighbours[i]);\r\n                    neighbours[i].prev=curr;\r\n                }\r\n            grid[curr.row][curr.col].isVisited=true;\r\n            order.push(curr);\r\n            if(curr===finish)\r\n                return order;\r\n        }\r\n    return order;\r\n}\r\n\r\nfunction getNeighbours(grid,curr)\r\n{\r\n    const r=curr.row;\r\n    const c=curr.col;\r\n    const n=[]\r\n    if(c-1>=0)\r\n        if((grid[r][c-1].isVisited===false)&&(grid[r][c-1].isWall===false))\r\n            n.push(grid[r][c-1]);\r\n    if(c+1<40)\r\n        if((grid[r][c+1].isVisited===false)&&(grid[r][c+1].isWall===false))\r\n            n.push(grid[r][c+1]);\r\n    if(r-1>=0)\r\n        if((grid[r-1][c].isVisited===false)&&(grid[r-1][c].isWall===false))\r\n            n.push(grid[r-1][c]);\r\n    if(r+1<25)\r\n        if((grid[r+1][c].isVisited===false)&&(grid[r+1][c].isWall===false))\r\n            n.push(grid[r+1][c]);\r\n    return n;\r\n}","let foundPath=false;\r\n\r\nexport function dfs(grid, start, finish)\r\n{\r\n    const order=[];\r\n    if(start.isVisited===true)\r\n        return order;\r\n    const r=start.row;\r\n    const c=start.col;\r\n    grid[r][c].isVisited=true;\r\n    order.push(start);\r\n    let found=false;\r\n    if(start===finish)\r\n    {\r\n        foundPath=true;\r\n        return order;\r\n    }\r\n    if(c-1>=0)\r\n        {\r\n            if((grid[r][c-1].isVisited===false)&&(grid[r][c-1].isWall===false))\r\n                {\r\n                    grid[r][c-1].prev=start;\r\n                    const temp=dfs(grid,grid[r][c-1],finish);\r\n                    order.push(...temp);\r\n                    found=found||temp.found;\r\n                    if(foundPath)\r\n                        return order;\r\n                }\r\n        }\r\n    if(c+1<40)\r\n        {\r\n            if((grid[r][c+1].isVisited===false)&&(grid[r][c+1].isWall===false))\r\n                {\r\n                    grid[r][c+1].prev=start;\r\n                    const temp=dfs(grid,grid[r][c+1],finish);\r\n                    order.push(...temp);                 \r\n                    if(foundPath)\r\n                        return order;\r\n                }\r\n        }\r\n    if(r-1>=0)\r\n        {\r\n            if((grid[r-1][c].isVisited===false)&&(grid[r-1][c].isWall===false))\r\n                {\r\n                    grid[r-1][c].prev=start;\r\n                    const temp=dfs(grid,grid[r-1][c],finish);\r\n                    order.push(...temp);\r\n                    if(foundPath)\r\n                        return order;\r\n                }\r\n        }\r\n    if(r+1<25)\r\n        {\r\n            if((grid[r+1][c].isVisited===false)&&(grid[r+1][c].isWall===false))\r\n                {\r\n                    grid[r+1][c].prev=start;\r\n                    const temp=dfs(grid,grid[r+1][c],finish);\r\n                    order.push(...temp);\r\n                    if(foundPath)\r\n                        return order;\r\n                }\r\n        }\r\n    return order;\r\n}\r\n","var Heap   = require('heap');\r\n\r\nfunction heuristic(a, b, c, d)\r\n{\r\n    return Math.abs(a-c)+ Math.abs(b-d);\r\n}\r\n\r\nfunction isValid(grid, r, c)\r\n{\r\n    if(r < grid.length - 1 && r >= 0 && c < grid[0].length - 1 && c >=0 )\r\n    {\r\n        if(grid[r][c].isWall === false) \r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function aStar(grid, start, finish)\r\n{\r\n    var openList=new Heap(function(nodeA, nodeB)\r\n    {\r\n        return (nodeA.f - nodeB.f) !== 0 ? nodeA.f - nodeB.f : nodeA.t - nodeB.t;\r\n    });\r\n    const dx = [1, -1 , 0, 0];\r\n    const dy = [0, 0, 1, -1];\r\n    const order = [];\r\n    openList.push({\r\n        f: 0,\r\n        s: start,\r\n        t : 0,\r\n    });\r\n    order.push(start);\r\n    start.distance = 0;\r\n    while(!openList.empty())\r\n    {\r\n        const curr = openList.pop();\r\n        const {row, col} = curr.s;\r\n        console.log(row, col);\r\n        \r\n        if(grid[row][col].isVisited === true) \r\n        continue;\r\n        grid[row][col].isVisited = true;\r\n        order.push(curr.s);\r\n        if(curr.s === finish) \r\n        return order;\r\n        \r\n        for(let i = 0; i<4 ; i++)\r\n        {\r\n            const newRow = row+dx[i];\r\n            const newCol = col+dy[i];\r\n            if(isValid(grid, newRow, newCol))\r\n            {\r\n                if(grid[newRow][newCol].isVisited === true) \r\n                continue;\r\n                const h = heuristic(newRow, newCol, finish.row, finish.col);\r\n                const temp = grid[row][col].distance + h + (grid[newRow][newCol].isWeighted === false ? 1: 5);\r\n                if(temp < grid[newRow][newCol].g)\r\n                {\r\n                    grid[newRow][newCol].g = temp;\r\n                    grid[newRow][newCol].distance = temp - h;\r\n                    openList.push({\r\n                        f: temp,\r\n                        s: grid[newRow][newCol],\r\n                        t : h,\r\n                    });\r\n                    grid[newRow][newCol].prev = grid[row][col];\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n    return order;\r\n}","export function dijkstra(grid, start, finish)\r\n{\r\n    const visitedNodesInOrder=[];\r\n    start.distance=0;\r\n    const unvisitedNodes=getAllNodes(grid);\r\n    while(!!unvisitedNodes.length)\r\n    {\r\n        sortNodesByDistance(unvisitedNodes);\r\n        const closestNode=unvisitedNodes.shift();\r\n        if(closestNode.isWall===true)\r\n        continue;\r\n        if(closestNode.distance===Infinity)\r\n        return visitedNodesInOrder;\r\n        closestNode.isVisited=true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if(closestNode===finish)\r\n        return visitedNodesInOrder;\r\n        updateUnvisitedNeighbours(closestNode, grid);\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes)\r\n{\r\n    unvisitedNodes.sort((nodeA, nodeB)=> nodeA.distance -nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid)\r\n{\r\n    const unvisitedNeighbours= getUnvisitedNeighbours(node, grid);\r\n    for(const neighbour of unvisitedNeighbours)\r\n    {\r\n        neighbour.distance=node.distance+1+(neighbour.isWeighted?4:0);\r\n        neighbour.prev=node;\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid)\r\n{\r\n    const neighbours=[];\r\n    const {col,row}=node;\r\n    if(row>0)\r\n    neighbours.push(grid[row-1][col]);\r\n    if(row<grid.length-1)\r\n    neighbours.push(grid[row+1][col]);\r\n    if(col>0)\r\n    neighbours.push(grid[row][col-1]);\r\n    if(col<grid[0].length-1)\r\n    neighbours.push(grid[row][col+1]);\r\n    return neighbours.filter(neighbour=>!neighbour.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid)\r\n{\r\n    const nodes=[];\r\n    for(const row of grid)\r\n    {\r\n        for(const node of row)\r\n        nodes.push(node);\r\n    }\r\n    return nodes;\r\n}\r\n\r\nexport function distanceDijkstra(grid, start, finish)\r\n{\r\n    dijkstra(grid,start, finish);\r\n    let curr=finish;\r\n    let dist=0;\r\n    if(curr.isVisited===false)\r\n    return Infinity;\r\n    while(curr!==null)\r\n    {\r\n        dist++;\r\n        curr=curr.prev;\r\n    }\r\n    return dist;\r\n}","export function getPath(grid, finish)\r\n{\r\n    const {row, col}=finish;\r\n    finish=grid[row][col];\r\n    const shortestPath=[];\r\n    let current=finish;\r\n    while(current!==null)\r\n    {\r\n        shortestPath.push(current);\r\n        current=current.prev;\r\n    }\r\n    return shortestPath;\r\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {Component} from 'react';\r\nimport './css-project/pathFinder.css';\r\nimport Node from './Node.js'\r\nimport {bfs} from './Algos/bfs';\r\nimport {dfs} from './Algos/dfs';\r\nimport {aStar} from './Algos/aStar';\r\nimport {dijkstra} from './Algos/dijkstra';\r\nimport {getPath} from './Algos/getPath'\r\nimport mars_rover from './mars_rover.png'\r\nimport {IntermediateNode} from './Algos/IntermediateNode'\r\n \r\nlet sr=12; //row index of start node\r\nlet sc=10; //column index of start node\r\nlet fr=12; //row index of finish node\r\nlet fc=30; //column index of finish node\r\nlet fr2=-1; //row index of second finish node\r\nlet fc2=-1; //column index of second finish node\r\nlet cross_button=\"\";\r\n\r\nexport default class PathFinder extends Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state={\r\n            grid: this.setGrid(),\r\n            mouse:false,\r\n            changeStart: false,\r\n            changeFinish: false,\r\n            changePlant: false,\r\n            addWeight:false,\r\n            pathLength:0,\r\n            isAnimationActive:false,\r\n            whichAlgo:null,\r\n            visualiseMessage:\"Select Algorithm\",\r\n            isPlantFinish:false,\r\n            PlantMessage:\"Add Plant\",\r\n            isPlantPresent:false,\r\n            infoMessage:\"Welcome to the Mars Curiosity Rover!\",\r\n            weightMessage:\"Add Weights\",\r\n            isAnimationPresent:false,\r\n        };\r\n\r\n        this.animatePath=this.animatePath.bind(this);\r\n    }\r\n    \r\n    setGrid()\r\n    {\r\n        const grid=[];\r\n        for (let i=0;i<25;i++)\r\n            {\r\n                const curr_row=[];\r\n                for(let j=0;j<40;j++)\r\n                    curr_row.push(newNode(i,j));\r\n                \r\n                grid.push(curr_row);\r\n            }\r\n        return grid;\r\n    }\r\n\r\n    handleMouseDown(r,c)\r\n    {\r\n        if(this.state.isAnimationActive===true)\r\n        return;\r\n        const newGrid=this.state.grid.slice();\r\n        const node=newGrid[r][c];\r\n        if(node.isStart===true)\r\n            {\r\n                this.setState({\r\n                    changeStart:true,\r\n                    mouse:true\r\n                });\r\n                return;\r\n            }\r\n\r\n        if(node.isPlant===true)\r\n        {\r\n            this.setState({\r\n                changePlant:true,\r\n                mouse:true\r\n            })\r\n            return;\r\n        }\r\n        \r\n        if(node.isFinish===true)\r\n            {\r\n                this.setState({\r\n                    changeFinish:true,\r\n                    mouse:true\r\n                });\r\n                return;\r\n            }\r\n\r\n        if(this.state.addWeight===true)\r\n        {\r\n            if(node.isWall===true)\r\n            {\r\n                node.isWall=false\r\n            }\r\n            const newNode={\r\n                ...node,\r\n                isWeighted:!node.isWeighted\r\n            }\r\n            newGrid[r][c]=newNode;\r\n        }\r\n        \r\n        else\r\n        {\r\n            if(node.isWeighted===true)\r\n                node.isWeighted=false;\r\n            \r\n            const newNode={\r\n                ...node,\r\n                isWall:!node.isWall\r\n            }\r\n            newGrid[r][c]=newNode;\r\n        }\r\n        this.setState({\r\n            grid:newGrid,\r\n            mouse:true\r\n        });\r\n        \r\n    }\r\n \r\n    handleMouseEnter(r,c)\r\n    {\r\n        if(this.state.mouse===false)\r\n        return;  \r\n        const newGrid=this.state.grid.slice();\r\n        const node=newGrid[r][c];\r\n        if(node.isStart||node.isFinish||node.isPlant)\r\n            return;\r\n        if(this.state.changeStart===true)\r\n            {\r\n                newGrid[sr][sc].isStart=false;\r\n                node.isStart=true;\r\n                node.isWall=false;\r\n                node.isWeighted=false;\r\n                sr=r;\r\n                sc=c;\r\n                 if(this.state.isAnimationPresent===true)\r\n                {\r\n                    this.setState({\r\n                        grid:newGrid\r\n                    }, () =>{\r\n                        this.visualiseMovingPath();\r\n                    });\r\n                    return;\r\n                }\r\n\r\n            }\r\n        else if (this.state.changePlant===true)\r\n            {\r\n                newGrid[fr2][fc2].isPlant=false;\r\n                node.isPlant=true;\r\n                node.isWall=false;\r\n                node.isWeighted=false;\r\n                fr2=r;\r\n                fc2=c;\r\n                if(this.state.isAnimationPresent===true)\r\n                {\r\n                    this.setState({\r\n                        grid:newGrid\r\n                    }, () =>{\r\n                        this.visualiseMovingPath();\r\n                    });\r\n                    return;\r\n                }\r\n            }\r\n        else if(this.state.changeFinish===true)\r\n            {\r\n                newGrid[fr][fc].isFinish=false;\r\n                node.isFinish=true;\r\n                node.isWall=false;\r\n                node.isWeighted=false;\r\n                fr=r;\r\n                fc=c;\r\n                if(this.state.isAnimationPresent===true)\r\n                {\r\n                    this.setState({\r\n                        grid:newGrid\r\n                    }, () =>{\r\n                        this.visualiseMovingPath();\r\n                    });\r\n                    return;\r\n                }\r\n            }\r\n        else if(this.state.addWeight===true)\r\n            {\r\n                if(node.isWall===true)\r\n                {\r\n                    node.isWall=false;\r\n                }\r\n                const newNode={\r\n                    ...node,\r\n                    isWeighted:!node.isWeighted,\r\n                }\r\n                newGrid[r][c]=newNode;\r\n            }\r\n        else\r\n        {\r\n            if(node.isWeighted===true)\r\n                node.isWeighted=false;\r\n            const newNode={\r\n                ...node,\r\n                isWall: !node.isWall\r\n            }\r\n            newGrid[r][c]=newNode;\r\n        }\r\n          \r\n        this.setState({grid:newGrid});\r\n    }\r\n    \r\n    handleMouseUp(r,c)\r\n    {\r\n        this.setState({\r\n            changeFinish: false,\r\n            changeStart: false,\r\n            changePlant:false,\r\n            mouse: false,\r\n           \r\n        });\r\n    }\r\n    \r\n    toggleW()\r\n    {\r\n        if(this.state.whichAlgo===\"BFS\"||this.state.whichAlgo===\"DFS\")\r\n        {\r\n            return;\r\n        }\r\n        if(this.state.addWeight===false)\r\n        this.setState({\r\n            weightMessage:\"Back to Walls!\"\r\n        });\r\n        if(this.state.addWeight===true)\r\n        this.setState({\r\n            weightMessage:\"Add Weights\"\r\n        });\r\n        this.setState({\r\n            addWeight: !(this.state.addWeight)\r\n        })\r\n\r\n    }\r\n\r\n    togglePlant()\r\n    {\r\n        if(this.state.isAnimationActive===true)\r\n        return;\r\n        if(this.state.isPlantPresent===true)\r\n        {\r\n            fr2=-1;\r\n            fc2=-1;\r\n            this.setState({\r\n                PlantMessage:\"Add Plant\"\r\n            })\r\n        }\r\n        else\r\n        {\r\n            fr2=12;\r\n            fc2=20;\r\n            this.setState({\r\n                PlantMessage:\"Remove Plant\"\r\n            })\r\n        }\r\n        this.resetGrid();\r\n        this.setState({\r\n            isPlantPresent: !this.state.isPlantPresent,\r\n            grid: this.setGrid()\r\n        });\r\n    }\r\n\r\n    removeWeights()\r\n    {\r\n        const grid=this.state.grid.slice();\r\n        for(let i=0;i<25;i++)\r\n        {\r\n            for(let j=0;j<40;j++)\r\n            grid[i][j]={\r\n                ...grid[i][j],\r\n                isWeighted:false\r\n            }\r\n        }\r\n        this.setState({grid:grid});\r\n    }\r\n\r\n    animatePath(path, additional=0, lastAnimation=true)\r\n    {\r\n          if(this.state.isAnimationPresent===true)\r\n        {\r\n            path.reverse();\r\n            let weightedLength=0;\r\n            for(let i=0;i<path.length;i++)\r\n                {\r\n                    const node=path[i];\r\n                    if(node.isStart||node.isFinish||node.isPlant)\r\n                        continue;\r\n                    if(node.isWeighted)\r\n                    weightedLength+=4;\r\n                    // eslint-disable-next-line no-loop-func\r\n                    document.getElementById(`node-${node.row}-${node.col}`).classList.add(\"node-shortest-path\");\r\n                    \r\n                    this.setState({\r\n                        pathLength: i+additional + weightedLength,\r\n                    });\r\n                }  \r\n                if(lastAnimation===true)\r\n                this.setState({\r\n                    isAnimationActive:false,\r\n                    isAnimationPresent:true,\r\n                });\r\n            return;\r\n        }\r\n\r\n        path.reverse();\r\n        let weightedLength=0;\r\n        for(let i=1;i<path.length-1;i++)\r\n            {\r\n                const node=path[i];\r\n                if(node.isStart||node.isFinish||node.isPlant)\r\n                continue;\r\n                if(node.isWeighted===true)\r\n                weightedLength+=4;\r\n                // eslint-disable-next-line no-loop-func\r\n                setTimeout(() => {\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-shortest-path';\r\n                    this.setState({\r\n                        pathLength: i+additional + weightedLength,\r\n                        isAnimationPresent :true\r\n                    });\r\n                }, 50 * i);\r\n            }\r\n            if(lastAnimation===true)\r\n            setTimeout(()=>{\r\n                this.setState({\r\n                    isAnimationActive:false,\r\n                    isAnimationPresent:true,\r\n                })\r\n            }, 50*(path.length+additional))\r\n    }\r\n    \r\n    animateVisited(order, additional=0)\r\n    {\r\n        if(this.state.isAnimationPresent===true)\r\n        {\r\n            for(let i = 0; i< order.length; i++)\r\n            {\r\n                const node = order[i];\r\n                if(node.isStart||node.isFinish||node.isPlant)\r\n                continue;\r\n                document.getElementById(`node-${node.row}-${node.col}`).classList.add(\"node-visited\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        for(let i = 1; i< order.length-1; i++)\r\n        {  \r\n            const node = order[i];\r\n            if(node.isStart||node.isFinish||node.isPlant)\r\n                continue;\r\n            setTimeout(() => {\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                'node node-visited';\r\n            },10 * (i+additional));\r\n        }\r\n    }\r\n    \r\n    setAlgo(algo)\r\n    {\r\n        if(this.state.isAnimationActive===true)\r\n        return;\r\n        this.resetPath();\r\n        if(algo === 'BFS' || algo === 'DFS')\r\n            {\r\n                this.removeWeights();\r\n                cross_button=\"cross-button\";\r\n                this.setState({\r\n                    isWeighted:false,\r\n                    weightMessage:\"Add Weights\"\r\n                })\r\n            }\r\n        else cross_button=\"\";\r\n        this.setState({\r\n            whichAlgo: algo,\r\n            visualiseMessage: `Visualise ${algo}`\r\n        });\r\n        if(algo==='Dijkstra')\r\n        this.setState({\r\n            infoMessage:\"Dijkstra's Algorithm is weighted and guarantees the shortest path!\"\r\n        });\r\n        else if(algo==='DFS')\r\n        {\r\n            this.setState({\r\n                infoMessage:\"Depth First Search is unweighted and does not guarantee the shortest path!\"\r\n            });\r\n        }\r\n        else if(algo==='BFS')\r\n        {\r\n            this.removeWeights();\r\n            this.setState({\r\n                infoMessage:\"Breadth First Search is unweighted and guarantees the shortest path!\"\r\n            });\r\n        }\r\n        \r\n        else if(algo==='A*')\r\n        this.setState({\r\n            infoMessage:\"A* Search is weighted and guarantees the shortest path!\"\r\n        });\r\n    }\r\n\r\n    visualise()\r\n    {\r\n        if(this.state.isAnimationActive === true) \r\n        return;\r\n        if(this.state.whichAlgo)\r\n        this.setAlgo(this.state.whichAlgo);\r\n        this.setState({\r\n            isAnimationActive:true,\r\n        })\r\n        if(this.state.isPlantPresent===true){\r\n            this.visualiseTwoDest();\r\n            return;\r\n        }\r\n\r\n        const grid = this.state.grid.map(a => a.map(b => Object.assign({}, b)));\r\n        const start = grid[sr][sc];\r\n        const finish = grid[fr][fc];\r\n        let order = [];\r\n        const algo = this.state.whichAlgo;\r\n        if(algo === 'BFS')\r\n            order = bfs(grid, start, finish);\r\n        else if(algo === 'DFS')\r\n            order = dfs(grid, start, finish);\r\n        else if(algo === 'Dijkstra')\r\n            order = dijkstra(grid, start, finish);\r\n        else if(algo === 'A*')\r\n            order = aStar(grid, start, finish);\r\n        const path  = getPath(grid, finish);\r\n        this.animateVisited(order);\r\n        setTimeout(() =>{\r\n            this.animatePath(path);\r\n        }, 10*order.length);\r\n        \r\n        \r\n    }\r\n\r\n    visualiseTwoDest()\r\n    {\r\n        if(this.state.isAnimationActive===true)\r\n        return;\r\n        if(this.state.isAnimationPresent===false)\r\n        this.setState({\r\n            isAnimationActive:true,\r\n        })\r\n        const grid=this.state.grid.slice();\r\n        const grid1 = grid.map(a => a.map(b => Object.assign({}, b)));\r\n        const grid2 = grid.map(a => a.map(b => Object.assign({}, b)));\r\n        const start = grid[sr][sc];\r\n        const f1 = grid[fr][fc];\r\n        const f2 = grid[fr2][fc2];\r\n        let order1 = [];\r\n        let order2 = [];\r\n        let path1;\r\n        let path2;\r\n        const algo = this.state.whichAlgo;\r\n        if(IntermediateNode(grid, start, f1, f2) === f1)\r\n        {\r\n            this.setState({\r\n                isPlantFinish:true\r\n            });\r\n            if(algo === 'BFS')\r\n            {\r\n                order1 = bfs(grid1, grid1[sr][sc], grid1[fr][fc]);\r\n                order2 = bfs(grid2, grid2[fr][fc], grid2[fr2][fc2]);\r\n            }\r\n            else if(algo === 'DFS')\r\n            {\r\n                order1 = dfs(grid1, grid1[sr][sc], grid1[fr][fc]);\r\n                order2 = dfs(grid2, grid2[fr][fc], grid2[fr2][fc2]);\r\n            }\r\n            else if(algo === 'Dijkstra')\r\n            {\r\n                order1 = dijkstra(grid1, grid1[sr][sc], grid1[fr][fc]);\r\n                order2 = dijkstra(grid2, grid2[fr][fc], grid2[fr2][fc2]);\r\n            }\r\n            else if(algo === 'A*')\r\n            {\r\n                order1 = aStar(grid1, grid1[sr][sc], grid1[fr][fc]);\r\n                order2 = aStar(grid2, grid2[fr][fc], grid2[fr2][fc2]);\r\n            }            \r\n            \r\n            path1 = getPath(grid1, grid1[fr][fc]);\r\n            path2 = getPath(grid2, grid2[fr2][fc2]);\r\n        }\r\n        else\r\n        {\r\n            this.setState({\r\n                isPlantFinish:false\r\n            });\r\n            if(algo === 'BFS')\r\n            {\r\n                order1 = bfs(grid1, grid1[sr][sc], grid1[fr2][fc2]);\r\n                order2 = bfs(grid2, grid2[fr2][fc2], grid2[fr][fc]);            \r\n            }\r\n            else if(algo === 'DFS')\r\n            {\r\n                order1 = dfs(grid1, grid1[sr][sc], grid1[fr2][fc2]);\r\n                order2 = dfs(grid2, grid2[fr2][fc2], grid2[fr][fc]);            \r\n            }\r\n            else if(algo === 'Dijkstra')\r\n            {\r\n                order1 = dijkstra(grid1, grid1[sr][sc], grid1[fr2][fc2]);\r\n                order2 = dijkstra(grid2, grid2[fr2][fc2], grid2[fr][fc]);\r\n            }\r\n            else if(algo === 'A*')\r\n            {\r\n                order1 = aStar(grid1, grid1[sr][sc], grid1[fr2][fc2]);\r\n                order2 = aStar(grid2, grid2[fr2][fc2], grid2[fr][fc]);           \r\n            } \r\n            path1 = getPath(grid1, grid1[fr2][fc2]);\r\n            path2 = getPath(grid2, grid2[fr][fc]);\r\n        }\r\n        if(this.state.isAnimationPresent===true)\r\n        {\r\n            for (let i=0;i<25;i++)\r\n            {\r\n                for( let j=0;j<40;j++)\r\n                document.getElementById(`node-${i}-${j}`).classList.remove(\"node-shortest-path\", \"node-visited\")\r\n            }\r\n            this.animateVisited(order1);\r\n            this.animateVisited(order2);\r\n            this.animatePath(path1, 0, false);\r\n            this.animatePath(path2, path1.length);\r\n            return;\r\n        }\r\n        this.animateVisited(order1);\r\n        this.animateVisited(order2, order1.length);\r\n        setTimeout(() =>{\r\n            this.animatePath(path1, 0 , false);\r\n        }, 10*(order1.length+order2.length) );\r\n        setTimeout(() =>{\r\n            this.animatePath(path2, path1.length);\r\n        }, 10*(order1.length+order2.length) + 50*(path1.length) );\r\n    }\r\n\r\n     visualiseMovingPath()\r\n    {\r\n        if(this.state.isPlantPresent===true)\r\n        {\r\n            this.visualiseTwoDest();\r\n            return;\r\n        }\r\n        const grid = this.state.grid.map(a => a.map(b => Object.assign({}, b)));\r\n        const start = grid[sr][sc];\r\n        const finish = grid[fr][fc];\r\n        let order = [];\r\n        const algo = this.state.whichAlgo;\r\n        if(algo === 'BFS')\r\n            order = bfs(grid, start, finish);\r\n        else if(algo === 'DFS')\r\n            order = dfs(grid, start, finish);\r\n        else if(algo === 'Dijkstra')\r\n            order = dijkstra(grid, start, finish);\r\n        else if(algo === 'A*')\r\n            order = aStar(grid, start, finish);\r\n        const path  = getPath(grid, finish);\r\n        for (let i=0;i<25;i++)\r\n        {\r\n            for( let j=0;j<40;j++)\r\n            document.getElementById(`node-${i}-${j}`).classList.remove(\"node-shortest-path\", \"node-visited\")\r\n        }\r\n        this.animateVisited(order);\r\n        this.animatePath(path);\r\n    }\r\n\r\n\r\n    resetGrid()\r\n    {\r\n        if(this.state.isAnimationActive===false)\r\n        {\r\n            sr=12;\r\n            sc=10;\r\n            fr=12;\r\n            fc=30;\r\n            cross_button=\"\";\r\n            const grid=this.setGrid();\r\n            this.setState({\r\n                grid:grid,\r\n                pathLength:0,\r\n                visualiseMessage:\"Select Algorithm\",\r\n                whichAlgo:null,\r\n                infoMessage:\"Welcome to the Mars Curiosity Rover!\",\r\n                isAnimationPresent:false\r\n            });\r\n\r\n            for (let i=0;i<25;i++)\r\n                {\r\n                    for( let j=0;j<40;j++)\r\n                        document.getElementById(`node-${i}-${j}`).classList.remove(\"node-shortest-path\", \"node-visited\")\r\n                }\r\n        }\r\n        \r\n    }\r\n\r\n    resetPath()\r\n    {\r\n        cross_button=\"\";\r\n        if(this.state.isAnimationActive===false)\r\n        {\r\n            this.setState({\r\n                pathLength:0,\r\n                visualiseMessage:\"Select Algorithm\",\r\n                whichAlgo:null,\r\n                infoMessage:\"Welcome to the Mars Curiosity Rover!\",\r\n                isAnimationPresent:false\r\n\r\n            });\r\n            for (let i=0;i<25;i++)\r\n            {\r\n                for( let j=0;j<40;j++)\r\n                document.getElementById(`node-${i}-${j}`).classList.remove(\"node-shortest-path\", \"node-visited\")\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    render ()\r\n    {\r\n        const grid = this.state.grid;\r\n        return(\r\n                <div>\r\n                    <div className=\"row clearfix\" \r\n                    onMouseEnter={()=>this.handleMouseUp()}>\r\n                        \r\n                        <img src={mars_rover} alt=\"Click for Tutorial\"></img>\r\n                        <div className=\"top-nav\">\r\n                            <a href=\"#\" className=\"button-top Reset\"\r\n                                    onClick = {() => this.resetGrid()}>\r\n                                    Reset\r\n                            </a>\r\n                            <a href=\"#\" className=\"button-top ResetPath\"\r\n                                onClick={()=>this.resetPath()}>\r\n                                Reset Path\r\n                            </a>\r\n                            <a href=\"#\" className=\"button-top plant-node\"\r\n                                onClick={()=>this.togglePlant()}>\r\n                                {this.state.PlantMessage}\r\n                            </a>   \r\n                            <a href=\"#\" className={`button-top weight-wall ${cross_button}`}\r\n                                onClick={()=>this.toggleW()}>\r\n                                {this.state.weightMessage}\r\n                            </a>                             \r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row info-message\" \r\n                    onMouseEnter={()=>this.handleMouseUp()}>\r\n                        <p className=\"info-message\">{this.state.infoMessage}</p>\r\n                    </div>\r\n                    <div className=\"row \" onMouseEnter={()=>this.handleMouseUp()}>\r\n                        <div class=\"col span-1-of-4 \" \r\n                        onMouseEnter={()=>this.handleMouseUp()}>\r\n                            <div className=\"algo-nav\">\r\n                                <h2>Algorithms</h2>\r\n                                <a href=\"#\" className=\"button-algo AStar\"\r\n                                onClick={()=>this.setAlgo('A*')}>\r\n                                A*\r\n                                </a>\r\n                                <a href=\"#\" className=\"button-algo BFS\"\r\n                                onClick = {() => this.setAlgo('BFS') }>\r\n                                Breadth First Search\r\n                                </a>\r\n                                <a href=\"#\" className=\"button-algo DFS\"\r\n                                    onClick = {() => this.setAlgo('DFS') }>\r\n                                    Depth First Search\r\n                                </a>\r\n                                <a href=\"#\" className=\"button-algo Dijkstra\"\r\n                                    onClick={()=>this.setAlgo('Dijkstra')}>\r\n                                    Dijkstra\r\n                                </a>\r\n                            </div>\r\n                            <a href=\"#\" className=\"button-visualise\"\r\n                                onClick={()=>this.visualise()}>\r\n                                {this.state.visualiseMessage}\r\n                            </a>\r\n                            <div className=\"pathLength\">\r\n                            Path Length: {this.state.pathLength}\r\n                            </div>\r\n                        </div>\r\n                \r\n                    <div className = \"grid col span-3-of-4\">\r\n                        {grid.map((row, rowInd) =>{\r\n                            return(\r\n                                <div key = {rowInd} >\r\n                                    {row.map((node, ind)=>{\r\n                                        const {val, row, col, isStart, isFinish, isWall,isWeighted, isVisited, inPath, isPlant} = node;\r\n                                        return(\r\n                                            <Node\r\n                                                key = {val}\r\n                                                num = {val}\r\n                                                row = {row}\r\n                                                col = {col}\r\n                                                isFinish = {isFinish}\r\n                                                isStart = {isStart}\r\n                                                isWall = {isWall}\r\n                                                isVisited = {isVisited}\r\n                                                isWeighted={isWeighted}\r\n                                                isPlant={isPlant}\r\n                                                onMouseDown = {(r,c)=> this.handleMouseDown(r, c)}\r\n                                                onMouseUp = {(r,c) => this.handleMouseUp(r, c)}\r\n                                                onMouseEnter = {(r,c) => this.handleMouseEnter(r, c)}\r\n                                            />\r\n                                        );\r\n                                            \r\n                                    })}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n}\r\n\r\nconst newNode= (row,col)=>{\r\n    return {\r\n        val: 50*row+col,\r\n        row,\r\n        col,\r\n        isStart: (row===sr && col===sc)?true:false,\r\n        isFinish: (row===fr && col===fc)? true:false,\r\n        isPlant:(row===fr2&&col===fc2&&row!==-1&&col!==-1)?true:false,\r\n        isWall: false,\r\n        isVisited: false,\r\n        prev:null,\r\n        isWeighted:false,\r\n        g:Infinity,\r\n        distance:Infinity\r\n    };\r\n}\r\n","import {distanceDijkstra} from './dijkstra.js'\r\n\r\nexport function IntermediateNode(grid, start, f1, f2)\r\n{\r\n    const grid1=grid.map(a=>a.map(b=>Object.assign({},b)));\r\n    const grid2=grid.map(a=>a.map(b=>Object.assign({},b)));\r\n    let a=distanceDijkstra(grid1, grid1[start.row][start.col], grid1[f1.row][f1.col]);\r\n    let b=distanceDijkstra(grid2, grid1[start.row][start.col], grid1[f2.row][f2.col]);\r\n    if(a<b)\r\n    {\r\n        return f1;\r\n    }\r\n    else\r\n    return f2;\r\n}","import React from \"react\";\nimport \"./App.css\";\nimport PathFinder from \"./marsRover/pathFinder\"\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <PathFinder />\n    </div>\n      \n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}